SendTelegram(TELEGRAM_CHAT_ID, "Jump Gate Beta")


//#########################################################

shipCaps = RECYCLER



//#########################################################






func dowork() {

ids = []
nrShips = []
coords = []

moons = GetCachedMoons()
    for moon in moons {
        celestial = GetCachedCelestial(moon.Coordinate)
        allShips, _ = celestial.GetShips()
        destination = GetHomeWorld()
        
        
        /////////////////////////////// change here
        Light = allShips.Recycler

     if Light > 0 && moon.Coordinate != GetHomeWorld().Coordinate {
        // test += celestial.GetID()
         ids += moon.GetID()
         nrShips += Light
         coords += moon.Coordinate
  
     }
     
    
    }
    
x = len(ids)
Print(x)
SendTelegram(TELEGRAM_CHAT_ID, "total moons with ships: "+x)





if len(ids) % 2 == 0{
    
    x = len(ids)
    
   
} else {
    x = len(ids) - 1
   
    
    
    
    
    origin = ids[x]
    homeworld = GetHomeWorld().GetID()
    
    
    
        ships = NewShipsInfos()        
        ships.Set(shipCaps, nrShips[x])
        
        
        err = JumpGate(origin, homeworld, *ships)
  
    
         SendTelegram(TELEGRAM_CHAT_ID, "Jump: "+coords[x]+ " -> "+GetHomeWorld().Coordinate )
    
  
   
   Sleep(Random(5000, 45000))
    
    
    
}



if len(ids) == 0 {
    
    SendTelegram(TELEGRAM_CHAT_ID, "EOF")
    StopScript("jumpGate.ank")
    
}else if len(ids) < 2 {


moons = GetCachedMoons()
    for moon in moons {
        celestial = GetCachedCelestial(moon.Coordinate)
        allShips, _ = celestial.GetShips()
        destination = GetHomeWorld()
        
        
        
        ////////////////////////////////////////change here
        Light = allShips.Recycler
 
        destination = GetHomeWorld()
                
        ships = NewShipsInfos()        
        ships.Set(shipCaps, Light)
        err = JumpGate(celestial.GetID(), destination.GetID(), *ships)
        Print(err)
        
        
        
        
        SendTelegram(TELEGRAM_CHAT_ID, "EOF")     
        StopScript("jumpGate.ank")    
              
              
    }

} else{


for i = 0; i < x / 2; i++ {
  
for j = 1; j < x; j++ {
    
        ships = NewShipsInfos()        
        ships.Set(shipCaps, nrShips[i])
        err = JumpGate(ids[i], ids[j], *ships)
         SendTelegram(TELEGRAM_CHAT_ID, "Jump: "+coords[i]+ " -> "+coords[j] )
    
  
   Sleep(Random(5000, 45000))
   i = i + 2
   j = j + 1
    
}  
    
}

}


}


for {
dowork()

SendTelegram(TELEGRAM_CHAT_ID, "Sleeping")
Sleep(Random(16, 25)*60*1000)
}
