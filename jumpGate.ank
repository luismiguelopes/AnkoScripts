SendTelegram(TELEGRAM_CHAT_ID, "Jump Gate Started")

// Ships to keep on each moon
keepShips = {
    
    LIGHTFIGHTER: 0,
    HEAVYFIGHTER: 0,
    CRUISER: 0,
    BATTLESHIP: 0,
    SMALLCARGO: 0,
    LARGECARGO: 0,
    COLONYSHIP: 0,
    BATTLECRUISER: 0,
    BOMBER: 0,
    DESTROYER: 0,
    DEATHSTAR: 0,
    RECYCLER: 0,
    ESPIONAGEPROBE: 0,
    REAPER: 0,
    PATHFINDER: 0
    
 
    // Add other ship types as needed
}

// Function to get all moons with ships to jump (excluding homeworld)
func GetMoonsWithShipsToJump() {
    moonsWithShips = []
    shipsToJump = []
    coords = []
    moons = GetCachedMoons()
    
    for moon in moons {
        // Skip homeworld
        if moon.Coordinate == GetHomeWorld().Coordinate {
            continue
        }
        
        celestial = GetCachedCelestial(moon.Coordinate)
        allShips, _ = celestial.GetShips()
        ships = {}
        hasShips = false
        
        // Check each ship type against keepShips configuration
        for shipType, keep in keepShips {
            available = 0
            if shipType == LIGHTFIGHTER {
                available = allShips.LightFighter
            } else if shipType == HEAVYFIGHTER {
                available = allShips.HeavyFighter
            } else if shipType == CRUISER {
                available = allShips.Cruiser
            } else if shipType == BATTLESHIP {
                available = allShips.Battleship
            } else if shipType == SMALLCARGO {
                available = allShips.SmallCargo
            } else if shipType == LARGECARGO {
                available = allShips.LargeCargo
            } else if shipType == COLONYSHIP {
                available = allShips.ColonyShip
            } else if shipType == BATTLECRUISER {
                available = allShips.Battlecruiser
            } else if shipType == BOMBER {
                available = allShips.Bomber
            } else if shipType == DESTROYER {
                available = allShips.Destroyer
            } else if shipType == DEATHSTAR {
                available = allShips.Deathstar
            } else if shipType == RECYCLER {
                available = allShips.Recycler
            } else if shipType == ESPIONAGEPROBE {
                available = allShips.EspionageProbe
            } else if shipType == REAPER {
                available = allShips.Reaper
            } else if shipType == PATHFINDER {
                available = allShips.Pathfinder
            }
            
            toJump = available - keep
            if toJump > 0 {
                ships[shipType] = toJump
                hasShips = true
            }
        }
        
        // Add moon to list if it has ships to jump
        if hasShips {
            moonsWithShips += moon.GetID()
            shipsToJump += ships
            coords += moon.Coordinate
        }
    }
    
    return moonsWithShips, shipsToJump, coords
}

// Function to perform a jump
func DoJump(originID, destID, ships, coordFrom, coordTo) {
    shipsInfo = NewShipsInfos()
    for shipType, amount in ships {
        shipsInfo.Set(shipType, amount)
    }
    err = JumpGate(originID, destID, *shipsInfo)
    
    if err == nil {
        SendTelegram(TELEGRAM_CHAT_ID, "Jump successful: " + coordFrom + " -> " + coordTo)
    } else {
        SendTelegram(TELEGRAM_CHAT_ID, "Jump failed: " + coordFrom + " -> " + coordTo + " Error: " + err)
    }
    
    Sleep(Random(5000, 45000))
    return err
}

func dowork() {
    ids, shipsList, coords = GetMoonsWithShipsToJump()
    x = len(ids)
    
    SendTelegram(TELEGRAM_CHAT_ID, "Found " + x + " moons with ships to jump")

    if x == 0 {
        SendTelegram(TELEGRAM_CHAT_ID, "No moons with ships to jump, ending script")
        StopScript("jumpGate.ank")
        return
    }

    // If only one moon, send to homeworld
    if x == 1 {
        DoJump(ids[0], GetHomeWorld().GetID(), shipsList[0], coords[0], GetHomeWorld().Coordinate)
        SendTelegram(TELEGRAM_CHAT_ID, "Single moon sent to homeworld")
        StopScript("jumpGate.ank")
        return
    }

    // Pair moons and jump ships between them
    for i = 0; i < x - 1; i += 2 {
        DoJump(ids[i], ids[i+1], shipsList[i], coords[i], coords[i+1])
    }
    
    // If odd number, send last to homeworld
    if x % 2 == 1 {
        DoJump(ids[x-1], GetHomeWorld().GetID(), shipsList[x-1], coords[x-1], GetHomeWorld().Coordinate)
    }
}

for {
    dowork()
    SendTelegram(TELEGRAM_CHAT_ID, "Sleeping for next cycle")
    Sleep(Random(30, 45) * 60 * 1000)
}