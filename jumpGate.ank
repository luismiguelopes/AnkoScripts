SendTelegram(TELEGRAM_CHAT_ID, "Jump Gate")

// Ships to keep on each moon
keepShips = {
    
    LIGHTFIGHTER: 1,
    HEAVYFIGHTER: 1,
    CRUISER: 1,
    BATTLESHIP: 10,
    SMALLCARGO: 10000,
    LARGECARGO: 5000,
    COLONYSHIP: 1,
    BATTLECRUISER: 10,
    BOMBER: 1,
    DESTROYER: 10,
    DEATHSTAR: 1,
    RECYCLER: 10,
    ESPIONAGEPROBE: 500,
    REAPER: 10,
    PATHFINDER: 500
    
 
    // Add other ship types as needed
}

// Function to get all moons with ships to jump (excluding homeworld)
func GetMoonsWithShipsToJump() {
    Print("Entrou em GetMoonsWithShipsToJump")
    moonsWithShips = []
    shipsToJump = []
    coords = []
    moons = GetCachedMoons()
    Print("moons: " + moons)
    for moon in moons {
        Print("A analisar moon: " + moon.Coordinate)
        SleepRandSec(1, 6)
        if moon.Coordinate == GetHomeWorld().Coordinate {
            continue
        }
        celestial = GetCachedCelestial(moon.Coordinate)
        allShips, _ = celestial.GetShips()
        Print("allShips: " + allShips)
        ships = {}
        hasShips = false
        for shipType, keep in keepShips {
            available = celestial.GetShips()
            toJump = available - keep
            if toJump > 0 {
                ships[shipType] = toJump
                hasShips = true
            }
        }
        Print("ships a saltar desta moon: " + ships)
        if hasShips {
            moonsWithShips += moon.GetID()
            shipsToJump += ships
            coords += moon.Coordinate
        }
    }
    Print("moonsWithShips: " + moonsWithShips)
    Print("shipsToJump: " + shipsToJump)
    Print("coords: " + coords)
    return moonsWithShips, shipsToJump, coords
}

// Function to perform a jump
func DoJump(originID, destID, ships, coordFrom, coordTo) {
    Print("Entrou em DoJump: " + originID + " -> " + destID)
    shipsInfo = NewShipsInfos()
    for shipType, amount in ships {
        shipsInfo.Set(shipType, amount)
    }
    err = JumpGate(originID, destID, *shipsInfo)
    Print("Resultado do JumpGate: " + err)
    SendTelegram(TELEGRAM_CHAT_ID, "Jump: " + coordFrom + " -> " + coordTo)
    Sleep(Random(5000, 45000))
    return err
}

func dowork() {
    Print("Entrou em dowork")
    ids, shipsList, coords = GetMoonsWithShipsToJump()
    x = len(ids)
    Print("ids: " + ids)
    Print("shipsList: " + shipsList)
    Print("coords: " + coords)
    Print("x: " + x)
    SendTelegram(TELEGRAM_CHAT_ID, "total moons with ships to jump: " + x)

    if x == 0 {
        Print("Nenhuma moon com ships para saltar, a terminar script.")
        SendTelegram(TELEGRAM_CHAT_ID, "EOF")
        StopScript("jumpGate.ank")
        return
    }

    // If only one moon, send to homeworld
    if x == 1 {
        Print("Apenas uma moon, a enviar para homeworld.")
        DoJump(ids[0], GetHomeWorld().GetID(), shipsList[0], coords[0], GetHomeWorld().Coordinate)
        SendTelegram(TELEGRAM_CHAT_ID, "EOF")
        StopScript("jumpGate.ank")
        return
    }

    // Pair moons and jump ships between them
    for i = 0; i < x - 1; i += 2 {
        Print("A saltar de " + coords[i] + " para " + coords[i+1])
        DoJump(ids[i], ids[i+1], shipsList[i], coords[i], coords[i+1])
    }
    // If odd number, send last to homeworld
    if x % 2 == 1 {
        Print("Moon impar, a enviar Ãºltima para homeworld.")
        DoJump(ids[x-1], GetHomeWorld().GetID(), shipsList[x-1], coords[x-1], GetHomeWorld().Coordinate)
    }
}

for {
    dowork()
    SendTelegram(TELEGRAM_CHAT_ID, "Sleeping")
    Sleep(Random(30, 45) * 60 * 1000)
}